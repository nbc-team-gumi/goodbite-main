name:
  Java Build and Deploy to AWS EC2

on:
  push:
    branches: [ 278-script-cicd-스크립트-추가 ]

env:
  DOCKER_IMAGE_TAG_NAME: good-bite

jobs:
  build-and-docker-push:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Generate .env file from secrets and vars
        run: |
          echo "DB_USERNAME=${{ vars.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ vars.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ vars.DB_HOST }}" >> .env
          echo "DB_NAME=${{ vars.DB_NAME }}" >> .env
          echo "DB_PORT=${{ vars.DB_PORT }}" >> .env
          
          echo "EC2_HOST=${{ secrets.EC2_HOST }}" >> .env
          echo "DOMAIN_URL=${{ vars.DOMAIN_URL }}" >> .env
          echo "SUBDOMAIN_URL=${{ vars.SUBDOMAIN_URL }}" >> .env
          echo "ELB_DNS_FRONT=${{ secrets.ELB_DNS_FRONT }}" >> .env
          
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
          echo "S3_REGION=${{ secrets.S3_REGION }}" >> .env
          echo "S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" >> .env
          echo "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" >> .env
          
          echo "REDIS_SERVER=${{ secrets.REDIS_SERVER }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
          
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "KAKAO_API_KEY=${{ secrets.KAKAO_API_KEY }}" >> .env
          echo "PUBLIC_DATA_KEY=${{ secrets.PUBLIC_DATA_KEY }}" >> .env

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
          no-cache: true

  deploy-to-ec2:
    needs: build-and-docker-push
    runs-on: ubuntu-20.04

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Fetch EC2 Instances from Auto Scaling Group
        id: fetch-ec2-instances
        run: |
          INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
            --query "AutoScalingGroups[0].Instances[].InstanceId" --output text)
          
          IP_ADDRESSES=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_IDS \
            --query "Reservations[].Instances[].PublicIpAddress" --output text)
          
          echo "instance_ips=$(echo $IP_ADDRESSES | tr -s ' ' | tr ' ' ',')" >> $GITHUB_ENV

      - name: Upload .env file to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          source: ".env"
          target: ~/
          host: ${{ env.instance_ips }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}

      - name: Deploy to each EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.instance_ips }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo usermod -aG docker $USER
            newgrp docker
            
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=443-443" --filter "publish=80-8080")
            
            if [ ! -z "$CONTAINER_ID" ]; then
            sudo docker stop $CONTAINER_ID
            sudo docker rm $CONTAINER_ID
            fi
            
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
            
            sudo docker run -d -p 80:8080 --env-file /home/ubuntu/.env \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
            
            rm -f /home/ubuntu/.env