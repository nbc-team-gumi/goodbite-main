on:
  push:
    branches: [ 191-feat-애플리케이션-포트를-8080-에서-80-으로-변경 ]

env:
  DOCKER_IMAGE_TAG_NAME: good-bite

jobs:
  build-and-docker-push:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build
        env:
          DB_USERNAME: ${{ vars.DB_USERNAME }}
          DB_PASSWORD: ${{ vars.DB_PASSWORD }}
          DB_HOST: ${{ vars.DB_HOST }}
          DB_NAME: ${{ vars.DB_NAME }}
          DB_PORT: ${{ vars.DB_PORT }}
          JWT_SECRET_KEY: ${{ vars.JWT_SECRET_KEY }}
          PUBLIC_DATA_KEY: ${{ secrets.PUBLIC_DATA_KEY }}
          EC2_HOST: ${{ vars.EC2_HOST }}
          DOMAIN_URL: ${{ vars.DOMAIN_URL }}
          SUBDOMAIN_URL: ${{ vars.SUBDOMAIN_URL }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest

  deploy-to-ec2:
    needs: build-and-docker-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo usermod -aG docker $USER
            newgrp docker
            
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=80-8080")

            if [ ! -z "$CONTAINER_ID" ]; then
            sudo docker stop $CONTAINER_ID
            sudo docker rm $CONTAINER_ID
            fi
            
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
            
            sudo docker run -d -p 80:8080 \
            -e DB_USERNAME=${{ vars.DB_USERNAME }} \
            -e DB_PASSWORD=${{ vars.DB_PASSWORD }} \
            -e DB_HOST=${{ vars.DB_HOST }} \
            -e DB_NAME=${{ vars.DB_NAME }} \
            -e DB_PORT=${{ vars.DB_PORT }} \
            -e JWT_SECRET_KEY=${{ vars.JWT_SECRET_KEY }} \
            -e PUBLIC_DATA_KEY=${{ secrets.PUBLIC_DATA_KEY }} \
            -e DOMAIN_URL=${{ vars.DOMAIN_URL }} \
            -e SUBDOMAIN_URL=${{ vars.SUBDOMAIN_URL }} \
            -e EC2_HOST=${{ vars.EC2_HOST }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest