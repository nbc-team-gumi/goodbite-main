name: Java Lint Check

on:
  pull_request:
    types: [opened, synchronize, reopened] # 처음 생성시점(opened), 커밋 추가/변경 시점(synchronize), 닫힌 PR 재오픈 시점(reopened)
    branches:
      - main
      - dev

jobs:
  lint:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Install dependencies
        run: ./gradlew build -x test

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Run Checkstyle
        id: checkstyle
        continue-on-error: true # 린팅 실패 여부와 관계없이 Slack 알림
        run: ./gradlew checkstyleMain

      - name: Deploy to S3
        if: success()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
          AWS_REGION: ${{ secrets.S3_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_CHECKSTYLE_REPORT_BUCKET_NAME }}
        run: |
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set default.region "$AWS_REGION"
          
          TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
          FILE_NAME="checkstyle-result_$TIMESTAMP.html"
          aws s3 cp build/reports/checkstyle/goodbite-checkstyle-result.html s3://$S3_BUCKET_NAME/$FILE_NAME
          
          export S3_URL="https://$S3_BUCKET_NAME.s3.$AWS_REGION.amazonaws.com/$FILE_NAME"
          echo "S3_URL: $S3_URL"
          echo "Checkstyle 결과 파일이 S3 버킷에 성공적으로 배포되었습니다. 파일명: $FILE_NAME"

      - name: Parse Checkstyle Summary
        id: parse_checkstyle
        if: always()
        run: |
          echo "S3_URL: $S3_URL"
          if [[ -f "build/reports/checkstyle/goodbite-checkstyle-result.xml" ]]; then
            FILE="build/reports/checkstyle/goodbite-checkstyle-result.xml"
            TOTAL_FILES=$(xmllint --xpath "count(//file)" $FILE)
            TOTAL_VIOLATIONS=$(xmllint --xpath "count(//error)" $FILE)
            FILES_WITH_VIOLATIONS=$(xmllint --xpath "count(//file[error])" $FILE)
            export TOTAL_FILES
            export TOTAL_VIOLATIONS
            export FILES_WITH_VIOLATIONS
          
            echo "# 🔍 Checkstyle Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 📊 Summary" >> $GITHUB_STEP_SUMMARY
            echo "| **Metric**            | **Value**     |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------------------|---------------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total files checked   | $TOTAL_FILES  |" >> $GITHUB_STEP_SUMMARY
            echo "| Total violations      | $TOTAL_VIOLATIONS |" >> $GITHUB_STEP_SUMMARY
            echo "| Files with violations | $FILES_WITH_VIOLATIONS |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔗 Checkstyle Report URL" >> $GITHUB_STEP_SUMMARY
            echo "[View Checkstyle HTML Report]($S3_URL)" >> $GITHUB_STEP_SUMMARY
          else
            echo "# 🔍 Checkstyle Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## ❌ Checkstyle Execution Failed" >> $GITHUB_STEP_SUMMARY
            echo "Checkstyle execution failed. No report was generated. Please check the logs for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Send Slack notification on Checkstyle Failure
        if: failure()
        env:
          SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            -H "Authorization: Bearer $SLACK_API_TOKEN" \
            --data '{
              "channel": "'"$SLACK_CHANNEL_ID"'",
              "text": "❗ Checkstyle 실행에 실패했습니다. 워크플로우 설정 또는 환경 구성을 확인하세요.",
              "attachments": [
                {
                  "color": "#ff0000",
                  "fields": [
                    { "title": "Repository", "value": "${{ github.repository }}", "short": true },
                    { "title": "Branch", "value": "${{ github.ref }}", "short": true },
                    { "title": "Commit Message", "value": "${{ github.event.head_commit.message }}", "short": false },
                    { "title": "Actions URL", "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}", "short": false }
                  ]
                }
              ]
            }' https://slack.com/api/chat.postMessage

      - name: Send Slack notification with success message
        if: success()
        env:
          SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        run: |
          ACTIONS_RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          curl -X POST -H "Content-Type: application/json; charset=utf-8" \
            -H "Authorization: Bearer $SLACK_API_TOKEN" \
              --data @- https://slack.com/api/chat.postMessage <<EOF
          {
            "channel": "$SLACK_CHANNEL_ID",
            "text": "✅ Checkstyle 실행에 성공하였습니다. 결과 파일을 확인하세요.",
            "attachments": [
              {
                "color": "#36a64f",
                "fields": [
                  { "title": "Repository", "value": "${{ github.repository }}", "short": true },
                  { "title": "Branch", "value": "${{ github.ref }}", "short": true },
                  { "title": "Commit Message", "value": "${{ github.event.head_commit.message }}", "short": false },
                  { "title": "Actions URL", "value": "$ACTIONS_RUN_URL", "short": false },
                  { "title": "Lint Report URL", "value": "$S3_URL", "short": false }
                ]
              },
              {
                "color": "#36a64f",
                "fields": [
                  { "title": "Total files checked", "value": "$TOTAL_FILES", "short": true },
                  { "title": "Total violations", "value": "$TOTAL_VIOLATIONS", "short": true },
                  { "title": "Files with violations", "value": "$FILES_WITH_VIOLATIONS", "short": true }
                ]
              }
            ],
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "업로드된 Checkstyle 결과 파일을 보려면 <$S3_URL|여기>를 클릭하세요."
                }
              }
            ]
          }
          EOF